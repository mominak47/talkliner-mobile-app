// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64-apple-ios15.6 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature AccessLevelOnImport -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name OSMFlutterFramework
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1.2
import CoreLocation
import Foundation
import MapKit
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public protocol Manager {
  func hideAll()
  func hide(location: CoreLocation.CLLocationCoordinate2D)
  func show(location: CoreLocation.CLLocationCoordinate2D)
  func showAll()
}
@_hasMissingDesignatedInitializers public class BaseManager {
  @objc deinit
}
public class BoundingBox : Swift.Equatable {
  final public let north: Swift.Double
  final public let west: Swift.Double
  final public let east: Swift.Double
  final public let south: Swift.Double
  public init(north: Swift.Double = 85.0, west: Swift.Double = -180.0, east: Swift.Double = 180.0, south: Swift.Double = -85.0)
  public init(center: CoreLocation.CLLocationCoordinate2D, distanceKm: Swift.Double)
  public init(boundingBoxs: [Swift.Double])
  public static func == (lhs: OSMFlutterFramework.BoundingBox, rhs: OSMFlutterFramework.BoundingBox) -> Swift.Bool
  public func center() -> CoreLocation.CLLocationCoordinate2D
  @objc deinit
}
extension OSMFlutterFramework.BoundingBox {
  public func isWorld() -> Swift.Bool
  public func toLLocations() -> (topLeft: CoreLocation.CLLocationCoordinate2D, bottomRight: CoreLocation.CLLocationCoordinate2D)
  public func toBoundingEpsg3857() -> OSMFlutterFramework.BoundingBox
  public func toMap() -> [Swift.String : Swift.Double]
}
public class CustomTiles {
  public init(_ mapTile: [Swift.String : Any], isMapCore: Swift.Bool = true)
  public func toString() -> Swift.String
  @objc deinit
}
public func == (lhs: CoreLocation.CLLocationCoordinate2D, rhs: CoreLocation.CLLocationCoordinate2D) -> Swift.Bool
public func - (lhs: CoreLocation.CLLocationCoordinate2D, rhs: CoreLocation.CLLocationCoordinate2D) -> Swift.Bool
extension CoreLocation.CLLocationCoordinate2D {
  public func isEqual(rhs: CoreLocation.CLLocationCoordinate2D, precision: Swift.Double = 1e6) throws -> Swift.Bool
  public func distance(other: CoreLocation.CLLocationCoordinate2D) -> Swift.Double
  public func destinationPoint(distanceInMeter: Swift.Double, bearingInDegree: Swift.Double) -> CoreLocation.CLLocationCoordinate2D
}
public let zoomIdentifierLevel: [Swift.Int : Swift.Double]
public struct TrackConfiguration {
  public var moveMap: Swift.Bool
  public var useDirectionMarker: Swift.Bool
  public var disableMarkerRotation: Swift.Bool
  public var controlUserMarker: Swift.Bool
  public init(moveMap: Swift.Bool = false, useDirectionMarker: Swift.Bool = false, disableMarkerRotation: Swift.Bool = false, controlUserMarker: Swift.Bool = true)
}
public enum LocationPermission {
  case Granted
  case NotGranted
  public static func == (a: OSMFlutterFramework.LocationPermission, b: OSMFlutterFramework.LocationPermission) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol OSMUserLocationHandler {
  func locationChanged(userLocation: CoreLocation.CLLocationCoordinate2D, heading: Swift.Double)
  func handlePermission(state: OSMFlutterFramework.LocationPermission)
}
@objc @_hasMissingDesignatedInitializers public class LocationManager : ObjectiveC.NSObject, CoreLocation.CLLocationManagerDelegate {
  public var userLocationIconConfiguration: OSMFlutterFramework.UserLocationConfiguration {
    get
  }
  public func setUserLocationIcons(userLocationIcons: OSMFlutterFramework.UserLocationConfiguration)
  public func requestSingleLocation()
  public func requestEnableLocation()
  public func toggleTracking(configuration: OSMFlutterFramework.TrackConfiguration)
  public func isTrackingEnabled() -> Swift.Bool
  public func stopLocation()
  public func moveToUserLocation(animated: Swift.Bool = true)
  @objc public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateLocations locations: [CoreLocation.CLLocation])
  @objc public func locationManager(_ manager: CoreLocation.CLLocationManager, didChangeAuthorization status: CoreLocation.CLAuthorizationStatus)
  @objc public func locationManager(_ manager: CoreLocation.CLLocationManager, didFailWithError error: any Swift.Error)
  @objc deinit
}
extension OSMFlutterFramework.LocationManager {
  public func setCLLocationManagerToDefault()
}
public struct UserLocationConfiguration {
  public var userIcon: OSMFlutterFramework.MarkerConfiguration {
    get
  }
  public var directionIcon: OSMFlutterFramework.MarkerConfiguration? {
    get
  }
  public init(userIcon: OSMFlutterFramework.MarkerConfiguration, directionIcon: OSMFlutterFramework.MarkerConfiguration?)
  public func copyWith(userIcon: OSMFlutterFramework.MarkerConfiguration? = nil, directionIcon: OSMFlutterFramework.MarkerConfiguration? = nil) -> OSMFlutterFramework.UserLocationConfiguration
}
public protocol MapMarkerHandler {
  func onMarkerSingleTap(location: CoreLocation.CLLocationCoordinate2D)
  func onMarkerLongPress(location: CoreLocation.CLLocationCoordinate2D)
}
@_hasMissingDesignatedInitializers public class MarkerManager {
  public func addMarker(marker: OSMFlutterFramework.Marker)
  public func updateMarker(oldlocation: CoreLocation.CLLocationCoordinate2D, newlocation: CoreLocation.CLLocationCoordinate2D, icon: UIKit.UIImage?, iconSize: OSMFlutterFramework.MarkerIconSize? = nil, angle: Swift.Float? = nil, anchor: OSMFlutterFramework.MarkerAnchor? = nil, scaleType: OSMFlutterFramework.MarkerScaleType? = nil)
  public func removeMarker(location: CoreLocation.CLLocationCoordinate2D)
  public func removeMarkers(locations: [CoreLocation.CLLocationCoordinate2D])
  public func getAllMarkers() -> [CoreLocation.CLLocationCoordinate2D]
  public func hildeAll()
  public func showAll()
  public func lockHandler()
  @objc deinit
}
public typealias MarkerIconSize = (x: Swift.Int, y: Swift.Int)
public typealias MarkerAnchor = (x: Swift.Double, y: Swift.Double)
public enum MarkerScaleType {
  case Scale
  case rotate
  case invariant
  case fixed
  public static func == (a: OSMFlutterFramework.MarkerScaleType, b: OSMFlutterFramework.MarkerScaleType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct Marker : Swift.Equatable {
  public init(location: CoreLocation.CLLocationCoordinate2D, markerConfiguration: OSMFlutterFramework.MarkerConfiguration)
  public static func == (lhs: OSMFlutterFramework.Marker, rhs: OSMFlutterFramework.Marker) -> Swift.Bool
}
public struct MarkerConfiguration {
  public init(icon: UIKit.UIImage, iconSize: OSMFlutterFramework.MarkerIconSize?, angle: Swift.Float?, anchor: OSMFlutterFramework.MarkerAnchor?, scaleType: OSMFlutterFramework.MarkerScaleType = MarkerScaleType.Scale)
  public func copyWith(icon: UIKit.UIImage? = nil, iconSize: OSMFlutterFramework.MarkerIconSize? = nil, angle: Swift.Float? = nil, anchor: OSMFlutterFramework.MarkerAnchor? = nil, scaleType: OSMFlutterFramework.MarkerScaleType? = nil) -> OSMFlutterFramework.MarkerConfiguration
}
@_hasMissingDesignatedInitializers public class PoisManager {
  public func setOrCreateIconPoi(id: Swift.String, icon: UIKit.UIImage, iconSize: OSMFlutterFramework.MarkerIconSize?)
  public func setMarkersPoi(id: Swift.String, markers: [OSMFlutterFramework.MarkerIconPoi])
  public func clearMarkersPoi(id: Swift.String, markers: [OSMFlutterFramework.MarkerIconPoi])
  public func hildeAll()
  public func showAll()
  public func lockHandler()
  @objc deinit
}
public struct MarkerIconPoi {
  public init(location: CoreLocation.CLLocationCoordinate2D, angle: Swift.Float?, anchor: OSMFlutterFramework.MarkerAnchor?)
}
public protocol PoylineHandler {
  func onTap(roadId: Swift.String)
}
public enum LineCapType {
  case BUTT
  case ROUND
  case SQUARE
  public static func == (a: OSMFlutterFramework.LineCapType, b: OSMFlutterFramework.LineCapType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum PolylineType {
  case LINE
  case DOT
  public static func == (a: OSMFlutterFramework.PolylineType, b: OSMFlutterFramework.PolylineType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class RoadManager {
  public func addRoad(id: Swift.String, polylines: [CoreLocation.CLLocationCoordinate2D], configuration: OSMFlutterFramework.RoadConfiguration)
  public func addRoad(id: Swift.String, polylines: Swift.String, configuration: OSMFlutterFramework.RoadConfiguration)
  public func removeRoad(id: Swift.String)
  public func removeAllRoads()
  public func hildeAll()
  public func showAll()
  public func lockHandler()
  @objc deinit
}
public struct RoadConfiguration {
  public init(width: Swift.Float, color: UIKit.UIColor, borderWidth: Swift.Float? = nil, borderColor: UIKit.UIColor? = nil, opacity: Swift.Float = 1.0, lineCap: OSMFlutterFramework.LineCapType = LineCapType.ROUND, polylineType: OSMFlutterFramework.PolylineType = PolylineType.LINE)
}
public protocol PShape {
  var center: CoreLocation.CLLocationCoordinate2D { get }
  var distanceInMeter: Swift.Double { get }
  var style: OSMFlutterFramework.ShapeStyleConfiguration { get }
}
public class CircleOSM {
  public var center: CoreLocation.CLLocationCoordinate2D
  public var distanceInMeter: Swift.Double
  public var style: OSMFlutterFramework.ShapeStyleConfiguration
  public init(center: CoreLocation.CLLocationCoordinate2D, distanceInMeter: Swift.Double, style: OSMFlutterFramework.ShapeStyleConfiguration)
  @objc deinit
}
public class RectShapeOSM {
  public var center: CoreLocation.CLLocationCoordinate2D
  public var distanceInMeter: Swift.Double
  public var style: OSMFlutterFramework.ShapeStyleConfiguration
  public init(center: CoreLocation.CLLocationCoordinate2D, distanceInMeter: Swift.Double, style: OSMFlutterFramework.ShapeStyleConfiguration)
  public init(boundingBpox: OSMFlutterFramework.BoundingBox, style: OSMFlutterFramework.ShapeStyleConfiguration)
  @objc deinit
}
public enum ShapeTypes {
  case Rect
  case Circle
  public static func == (a: OSMFlutterFramework.ShapeTypes, b: OSMFlutterFramework.ShapeTypes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ShapeManager : OSMFlutterFramework.BaseManager, OSMFlutterFramework.Manager {
  public func drawShape(key: Swift.String, shape: any OSMFlutterFramework.PShape)
  public func deleteShape(ckey: Swift.String)
  public func deleteAllShapes()
  public func deleteAllCircles()
  public func deleteAllRect()
  public func hideAll()
  public func hide(location: CoreLocation.CLLocationCoordinate2D)
  public func show(location: CoreLocation.CLLocationCoordinate2D)
  public func showAll()
  @objc deinit
}
public struct ShapeStyleConfiguration {
  public init(filledColor: UIKit.UIColor, borderColor: UIKit.UIColor, borderWidth: Swift.Double)
}
public struct ZoomConfiguration {
  public let initZoom: Swift.Int
  public let minZoom: Swift.Int
  public let maxZoom: Swift.Int
  public let step: Swift.Int
  public init(initZoom: Swift.Int = 0, minZoom: Swift.Int = 0, maxZoom: Swift.Int = 19, step: Swift.Int = 1)
  public init(_ map: [Swift.String : Swift.Int])
}
public struct OSMMapConfiguration {
  public init(zoomLevelScaleFactor: Swift.Double = 0.65, numDrawPreviousLayers: Swift.Int = 1, adaptScaleToScreen: Swift.Bool = true)
}
public protocol OnMapGesture {
  func onSingleTap(location: CoreLocation.CLLocationCoordinate2D)
  func onLongTap(location: CoreLocation.CLLocationCoordinate2D)
}
public protocol OnMapMoved {
  func onMove(center: CoreLocation.CLLocationCoordinate2D, bounds: OSMFlutterFramework.BoundingBox, zoom: Swift.Double)
  func onRotate(angle: Swift.Double)
  func onMapInteraction()
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class OSMView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency final public let markerManager: OSMFlutterFramework.MarkerManager
  @_Concurrency.MainActor @preconcurrency final public let roadManager: OSMFlutterFramework.RoadManager
  @_Concurrency.MainActor @preconcurrency final public let poisManager: OSMFlutterFramework.PoisManager
  @_Concurrency.MainActor @preconcurrency final public let locationManager: OSMFlutterFramework.LocationManager
  @_Concurrency.MainActor @preconcurrency final public let shapeManager: OSMFlutterFramework.ShapeManager
  @_Concurrency.MainActor @preconcurrency public var onMapGestureDelegate: (any OSMFlutterFramework.OnMapGesture)? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var onMapMove: (any OSMFlutterFramework.OnMapMoved)?
  @_Concurrency.MainActor @preconcurrency public var mapHandlerDelegate: (any OSMFlutterFramework.MapMarkerHandler)? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var userLocationDelegate: (any OSMFlutterFramework.OSMUserLocationHandler)? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var roadTapHandlerDelegate: (any OSMFlutterFramework.PoylineHandler)? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public init(rect: CoreFoundation.CGRect, location: CoreLocation.CLLocationCoordinate2D?, zoomConfig: OSMFlutterFramework.ZoomConfiguration, mapTileConfiguration: OSMFlutterFramework.OSMMapConfiguration = OSMMapConfiguration(), tile: OSMFlutterFramework.CustomTiles? = nil)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @objc deinit
}
extension OSMFlutterFramework.OSMView {
  @_Concurrency.MainActor @preconcurrency public func initialisationMapWithInitLocation()
  @_Concurrency.MainActor @preconcurrency public func setBoundingBox(bounds: OSMFlutterFramework.BoundingBox)
  @_Concurrency.MainActor @preconcurrency public func moveTo(location: CoreLocation.CLLocationCoordinate2D, zoom: Swift.Int?, animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func moveToByBoundingBox(bounds: OSMFlutterFramework.BoundingBox, animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func setCustomTile(tile: OSMFlutterFramework.CustomTiles)
  @_Concurrency.MainActor @preconcurrency public func zoom() -> Swift.Int
  @_Concurrency.MainActor @preconcurrency public func zoomIn(step: Swift.Int? = nil, animated: Swift.Bool = true)
  @_Concurrency.MainActor @preconcurrency public func zoomOut(step: Swift.Int? = nil, animated: Swift.Bool = true)
  @_Concurrency.MainActor @preconcurrency public func setZoom(zoom: Swift.Int, animated: Swift.Bool = true)
  @_Concurrency.MainActor @preconcurrency public func getBoundingBox() -> OSMFlutterFramework.BoundingBox
  @_Concurrency.MainActor @preconcurrency public func enableRotation(enable: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func setRotation(angle: Swift.Double, animated: Swift.Bool = true)
  @_Concurrency.MainActor @preconcurrency public func center() -> CoreLocation.CLLocationCoordinate2D
  @_Concurrency.MainActor @preconcurrency public func stopCamera()
  @_Concurrency.MainActor @preconcurrency public func setLocationManagerDelegate(locationDelegate: (any CoreLocation.CLLocationManagerDelegate)?)
  @_Concurrency.MainActor @preconcurrency public func hideAllLayers()
  @_Concurrency.MainActor @preconcurrency public func showAllLayers()
  @_Concurrency.MainActor @preconcurrency public func disableTouch()
  @_Concurrency.MainActor @preconcurrency public func enableTouch()
}
extension OSMFlutterFramework.PolylineType : Swift.Equatable {}
extension OSMFlutterFramework.PolylineType : Swift.Hashable {}
extension OSMFlutterFramework.LocationPermission : Swift.Equatable {}
extension OSMFlutterFramework.LocationPermission : Swift.Hashable {}
extension OSMFlutterFramework.MarkerScaleType : Swift.Equatable {}
extension OSMFlutterFramework.MarkerScaleType : Swift.Hashable {}
extension OSMFlutterFramework.LineCapType : Swift.Equatable {}
extension OSMFlutterFramework.LineCapType : Swift.Hashable {}
extension OSMFlutterFramework.CircleOSM : OSMFlutterFramework.PShape {}
extension OSMFlutterFramework.RectShapeOSM : OSMFlutterFramework.PShape {}
extension OSMFlutterFramework.ShapeTypes : Swift.Equatable {}
extension OSMFlutterFramework.ShapeTypes : Swift.Hashable {}
